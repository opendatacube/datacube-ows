name: OWS build and push

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [synchronize, opened, reopened, ready_for_review]
  release:
    types: [created, edited]

env:
  ORG: opendatacube
  IMAGE: ows
  DB_USERNAME: opendatacubeusername

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      run: |
        echo "${{ secrets.DockerPassword }}" | docker login -u "${{ secrets.DockerUser }}" --password-stdin

    # We build the stage 1 image, then run test on it
    # These tests require extra files we don't want in
    # the production image
    # We build the stage 1 image, then run test on it
    # These tests require extra files we don't want in
    # the production image
    - name: Build dev OWS image (stage 1 - unit test builder)
      run: |
        docker build \
          --target env_builder \
          --tag    ${ORG}/${IMAGE}:_builder \
          .

    - name: Test and lint dev OWS image (stage 1 - unit test)
      run: |
        mkdir artifacts
        docker run -v ${PWD}/artifacts:/mnt/artifacts ${ORG}/${IMAGE}:_builder /bin/sh -c "./check-code.sh"
        mv ./artifacts/coverage.xml ./artifacts/coverage-unit.xml

    - name: Dockerized Integration Pytest (stage 1 - integration test)
      run: |
        chmod a+rw artifacts
        docker-compose -f docker-compose.yaml -f docker-compose.db.yaml up -d
        docker-compose -f docker-compose.yaml -f docker-compose.db.yaml exec -T ows /bin/sh -c "cd /code;./check-code-all.sh"
        docker-compose -f docker-compose.yaml -f docker-compose.db.yaml down

    - name: Upload All coverage to Codecov (stage 1 - upload coverage result)
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CodeCovToken }}
        file: ./artifacts/*.xml
        fail_ci_if_error: false

    # Run performance profiling
    - name: setup performance profiling with py-spy (stage 1 - run profiling containers)
      run: |
        docker-compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml up -d

    - name: Sleep for 10 seconds (stage 1 - wait for services to be ready)
      uses: whatnick/wait-action@master
      with:
        time: '10s'

    - name: set output container pid (stage 1 - get ows container pid)
      id: set-output-container-id
      run: |
        echo "::set-output name=PID::$(docker inspect --format '{{.State.Pid}}' $(docker inspect -f '{{.Name}}' \
        $(docker-compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml ps -q ows) \
        | cut -c2-))"

    - name: Run py-spy profiling (stage 1 - run profiling service)
      timeout-minutes: 1
      continue-on-error: true
      run: |
        docker-compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml \
        exec -T ows /bin/sh -c "cd /code;./test_urls.sh &"
        docker-compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml \
        run pyspy record -f speedscope -o ./artifacts/profile.json --duration 30 \
        --pid ${{steps.set-output-container-id.outputs.PID}} --subprocesses


    - name: Stop py-spy profiling after timeout (stage 1 - stop profiling)
      run: |
        docker-compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.pyspy.yaml down


    - name: Upload profile to artifact (stage 1 - Upload profiling svg to artifacts)
      uses: actions/upload-artifact@v2
      with:
        name: profile.json
        path: ./artifacts/profile.json

    # Build prod image and tag as latest, connect to pre-indexed database
    - name: Build and run prod OWS images (stage 2)
      run: |
        docker-compose -f docker-compose.yaml -f docker-compose.db.yaml -f docker-compose.prod.yaml up --build --force-recreate -d

    - name: Sleep for 10 seconds
      uses: whatnick/wait-action@master
      with:
        time: '10s'

    # Run some tests on the images
    # These tests require a working database
    - name: Test ping
      run: |
        curl --show-error --fail \
        --connect-timeout 5 \
        --max-time 10 \
        --retry 5 \
        --retry-delay 0 \
        --retry-max-time 40 \
        "localhost:8000/ping" \
        > /dev/null

    - name: Test datacube-ows-update
      run: |
        docker-compose exec -T ows datacube-ows-update --schema --role ${DB_USERNAME}
        docker-compose exec -T ows datacube-ows-update

    - name: Test WMS GetCapabilities
      run: |
        curl --silent --show-error --fail \
        "localhost:8000/?service=WMS&version=1.3.0&request=GetCapabilities" \

    - name: Test WMTS GetCapabilities
      run: |
        curl --silent --show-error --fail \
        "localhost:8000/?service=WMS&version=1.0.0&request=GetCapabilities" \
        > /dev/null

    - name: Test WCS1 GetCapabilities
      run: |
        curl --silent --show-error --fail \
        "localhost:8000/?service=WCS&version=1.0.0&request=GetCapabilities"
        > /dev/null

    - name: Test WCS2 GetCapabilities
      run: |
        curl --silent --show-error --fail \
        "localhost:8000/?service=WCS&version=2.0.1&request=GetCapabilities"
        > /dev/null

    - name: Test Prometheus Metrics
      run: |
        curl --silent --show-error --fail \
        "localhost:8000/metrics"
        > /dev/null

    # Tag image if this is a tagged build
    # if not use a pseudo tag based on current tag,
    # number of commits since last tag and git hash
    - name: Push to DockerHub (master branch or tagged release only)
      if: github.ref == 'refs/heads/master' || github.event_name == 'release'
      run: |
        # figure out extra tag
        git fetch --prune --unshallow 2> /dev/null || true
        tag=$(git describe --tags)
        # tag and push images
        docker tag ${ORG}/${IMAGE}:latest ${ORG}/${IMAGE}:${tag}
        docker push ${ORG}/${IMAGE}:latest
        docker push ${ORG}/${IMAGE}:${tag}